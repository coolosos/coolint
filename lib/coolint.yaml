include: package:flutter_lints/flutter.yaml

#------------------------------------------------------------------------------
# ANALYZER
#
# Configuration of the Dart static analyzer.
# Here we can define file exclusions, configure the severity of
# errors, and enable experimental language features.
#
#------------------------------------------------------------------------------

analyzer:
  # Exclude files from analysis. Useful for ignoring generated files.
  exclude:
    - "**/*.g.dart"
    - "**/*.gr.dart"
    - "**.config.dart"
    - "**/*.module.dart"
    - "**/*.freezed.dart"
    - "**/*.mapper.dart"
    - "**/__brick__/**"

  # Define the severity of certain analyzer errors.
  # Possible values: ignore, info, warning, error.
  errors:
    missing_required_param: error
    missing_return: error
    must_be_immutable: error
    invalid_assignment: error
    only_throw_errors: error
    invalid_use_of_internal_member: error
    todo: ignore

  # Language feature configuration.
  language:
    strict-casts: false
    # strict-inference: true # Commented out for future activation
    # strict-raw-types: true # Commented out for future activation

#------------------------------------------------------------------------------
# LINTER
#
# Linter rule configuration.
# The rules are grouped by category to make them easier to maintain.
#
#------------------------------------------------------------------------------

linter:
  rules:
    #==========================================================================
    # Error Prevention
    # Rules that help prevent common runtime errors.
    #==========================================================================
    await_only_futures: true
    invalid_case_patterns: true
    only_throw_errors: true
    overridden_fields: true
    recursive_getters: true
    unawaited_futures: true
    use_rethrow_when_possible: true
    avoid_dynamic_calls: true
    invalid_runtime_check_with_js_interop_types: true
    avoid_returning_null_for_void: true
    avoid_shadowing_type_parameters: true
    avoid_type_to_string: true
    matching_super_parameters: true
    no_logic_in_create_state: true
    strict_top_level_inference: true

    #==========================================================================
    # Style & Formatting
    # Rules to maintain a consistent and readable code style.
    #==========================================================================
    always_declare_return_types: true
    always_put_required_named_parameters_first: true
    camel_case_types: true
    empty_constructor_bodies: true
    lines_longer_than_80_chars: true
    prefer_single_quotes: true
    require_trailing_commas: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: true
    sort_unnamed_constructors_first: true
    type_annotate_public_apis: true
    unnecessary_parenthesis: true
    prefer_interpolation_to_compose_strings: true
    prefer_generic_function_type_aliases: true
    flutter_style_todos: true
    avoid_escaping_inner_quotes: true
    prefer_int_literals: true
    unnecessary_library_name: true
    unnecessary_underscores: true
    constant_identifier_names: false # Disabled by user preference

    #==========================================================================
    # Unnecessary Code & Redundancy
    # Rules to detect and eliminate dead or redundant code.
    #==========================================================================
    avoid_empty_else: true
    avoid_unused_constructor_parameters: true
    unnecessary_await_in_return: true
    unnecessary_const: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_in_if_null_operators: true

    #==========================================================================
    # Performance & Best Practices
    # Rules that promote more performant code and follow Dart's
    # best practices.
    #==========================================================================
    avoid_field_initializers_in_const_classes: true
    prefer_asserts_in_initializer_lists: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    tighten_type_of_initializing_formals: true
    use_enums: true
    use_super_parameters: true
    avoid_print: true
    avoid_single_cascade_in_expression_statements: true
    avoid_types_as_parameter_names: true

    #==========================================================================
    # Flutter Specific
    # Rules specific to Flutter development.
    #==========================================================================
    avoid_web_libraries_in_flutter: true
    sized_box_for_whitespace: true
    sized_box_shrink_expand: true
    use_colored_box: true
    use_decorated_box: true
    use_key_in_widget_constructors: true

    #==========================================================================
    # Pub & Imports
    # Rules related to pubspec.yaml and import management.
    #==========================================================================
    always_use_package_imports: true
    avoid_relative_lib_imports: true
    depend_on_referenced_packages: true
    implementation_imports: true
    sort_pub_dependencies: false
    library_annotations: true

#------------------------------------------------------------------------------
# DART CODE METRICS
#
# Configuration of code metrics for additional analysis.
#
#------------------------------------------------------------------------------

dart_code_metrics:
  # Code patterns to avoid.
  anti-patterns:
    - long-method
    - long-parameter-list

  # Complexity and size metrics.
  metrics:
    cyclomatic-complexity: 20
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 50

  # Exclude files from metrics.
  metrics-exclude:
    - test/**

  # Additional metric rules.
  rules:
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - prefer-conditional-expressions
    - no-equal-then-else
